'From Squeak3.9 of 7 November 2006 [latest update: #7067] on 7 February 2008 at 10:09:42 pm'!TestCase subclass: #MySTLexicalAnalyzerStreamTestCase	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'MySTCompiler'!!MySTLexicalAnalyzerStreamTestCase methodsFor: 'as yet unclassified' stamp: 'SZ 1/3/2008 11:13'!testBinMessages	| test |	test := MySTLexicalAnalyzerStream on: '~= == ~~ <= >= <> || && + - 12 +- // '.	self should: test next = ('~=' -> #binmessage).	self should: test next = ('==' -> #binmessage).	self should: test next = ('~~' -> #binmessage).	self should: test next = ('<=' -> #binmessage).	self should: test next = ('>=' -> #binmessage).	self should: test next = ('<>' -> #binmessage).	self should: test next = ('||' -> #binmessage).	self should: test next = ('&&'->#binmessage).	self should: test next = ('+' -> #binmessage).	self should: test next = ('-' -> #binmessage).	self should: test next = ('12' -> #number).	self should: test next = ('+-'->#binmessage).	self should: test next = ('//' -> #binmessage).	self should: test atEnd.!]style[(15 3 5 4 4 4 25 5 39 3 4 9 4 9 20 3 4 9 4 9 20 3 4 9 4 9 20 3 4 9 4 9 20 3 4 9 4 10 19 3 4 9 4 9 20 3 4 9 4 9 20 3 4 9 4 9 18 3 4 9 4 9 19 3 4 9 4 9 19 3 4 9 4 9 16 3 4 9 4 9 18 3 4 9 4 9 20 3 4 9 4 7)f2b,f2,f2cblue;i,f2,f2cblue;i,f2,f2cmagenta;,f2,f2c255148000,f2,f2cmagenta;,f2,f2cblue;i,f2,f2c255148000,f2,f2cmagenta;,f2,f2cblue;i,f2,f2c255148000,f2,f2cmagenta;,f2,f2cblue;i,f2,f2c255148000,f2,f2cmagenta;,f2,f2cblue;i,f2,f2c255148000,f2,f2cmagenta;,f2,f2cblue;i,f2,f2c255148000,f2,f2cmagenta;,f2,f2cblue;i,f2,f2c255148000,f2,f2cmagenta;,f2,f2cblue;i,f2,f2c255148000,f2,f2cmagenta;,f2,f2cblue;i,f2,f2c255148000,f2,f2cmagenta;,f2,f2cblue;i,f2,f2c255148000,f2,f2cmagenta;,f2,f2cblue;i,f2,f2c255148000,f2,f2cmagenta;,f2,f2cblue;i,f2,f2c255148000,f2,f2cmagenta;,f2,f2cblue;i,f2,f2c255148000,f2,f2cmagenta;,f2,f2cblue;i,f2,f2c255148000,f2,f2cmagenta;,f2,f2cblue;i,f2! !!MySTLexicalAnalyzerStreamTestCase methodsFor: 'as yet unclassified' stamp: 'SZ 2/4/2008 12:08'!testBlockArgs	| test |	test := MySTLexicalAnalyzerStream on: '[:a :asdf123 :_tmp_|]'.	self should: test next = ('[' -> #token).	self should: test next = (':a'->#blockarg).	self should: test next = (':asdf123'->#blockarg).	self should: test next = (':_tmp_' -> #blockarg).	self should: test next = ('|' -> #binmessage).	self should: test next = (']' -> #token).	self should: test atEnd.! !!MySTLexicalAnalyzerStreamTestCase methodsFor: 'as yet unclassified' stamp: 'SZ 1/26/2008 18:36'!testChars0	"test := MySTSourceString with: '#(()))'.	self should: test size == 2.	self should: (test at: 1)	= '#(())'.	self should: (test at: 2)	= ')'."	| test |	test := MySTLexicalAnalyzerStream on: '$(123)'.	self should: test next = ('$('->#char).	self should: test next = ('123'->#number).	self should: test next = (')'->#token).! !!MySTLexicalAnalyzerStreamTestCase methodsFor: 'as yet unclassified' stamp: 'SZ 2/7/2008 22:05'!testChars1	| test |	test := MySTLexicalAnalyzerStream on: '	. , | :=)([]"123"''345''; #() < > ^$.#word123 <primZero>'.	self should: test next = ('.' -> #token).	self should: test next = (',' -> #binmessage).	self should: test next = ('|' -> #binmessage).	self should: test next = (':=' -> #assign).	self should: test next = (')' -> #token).	self should: test next = ('(' -> #token).	self should: test next = ('[' -> #token).	self should: test next = (']' -> #token).	self should: test next = ('"123"' -> #comment).	self should: test next = ('''345''' -> #string).	self should: test next = (';' -> #token).	self should: test next = ('#()' -> #array).	self should: test next = ('<' -> #binmessage).	self should: test next = ('>' -> #binmessage).	self should: test next = ('^' -> #token).	self should: test next = ('$.' -> #char).	self should: test next = ('#word123' -> #literal).	self should: test next = ('<primZero>' -> #primitive).	self should: test atEnd! !!MySTLexicalAnalyzerStreamTestCase methodsFor: 'as yet unclassified' stamp: 'SZ 1/3/2008 11:06'!testChars2	| test |	test := MySTLexicalAnalyzerStream on: '~ ` @ % & ? * - = + \ / { }'.	self should: test next = ('~'->#binmessage).	self should: test next = ('`'->#binmessage).	self should: test next = ('@' -> #binmessage).	self should: test next = ('%' -> #binmessage).	self should: test next = ('&' -> #binmessage).	self should: test next = ('?'-> #binmessage).	self should: test next = ('*' -> #binmessage).	self should: test next = ('-'->#binmessage).	self should: test next= ('='->#binmessage).	self should: test next = ('+'->#binmessage).	self should: test next = ('\' -> #binmessage).	self should: test next = ('/'-> #binmessage).	self should: test next = ('{'->#binmessage).	self should: test next = ('}' -> #binmessage).	self should: test atEnd.!]style[(10 3 5 4 4 34 29 3 4 9 4 9 17 3 4 9 4 9 17 3 4 9 4 9 19 3 4 9 4 9 19 3 4 9 4 9 19 3 4 9 4 9 18 3 4 9 4 9 19 3 4 9 4 9 17 3 4 9 4 8 17 3 4 9 4 9 17 3 4 9 4 9 19 3 4 9 4 9 18 3 4 9 4 9 17 3 4 9 4 9 19 3 4 9 4 1 6)f2b,f2,f2cblue;i,f2,f2cblue;i,f2,f2c255148000,f2,f2cmagenta;,f2,f2cblue;i,f2,f2c255148000,f2,f2cmagenta;,f2,f2cblue;i,f2,f2c255148000,f2,f2cmagenta;,f2,f2cblue;i,f2,f2c255148000,f2,f2cmagenta;,f2,f2cblue;i,f2,f2c255148000,f2,f2cmagenta;,f2,f2cblue;i,f2,f2c255148000,f2,f2cmagenta;,f2,f2cblue;i,f2,f2c255148000,f2,f2cmagenta;,f2,f2cblue;i,f2,f2c255148000,f2,f2cmagenta;,f2,f2cblue;i,f2,f2c255148000,f2,f2cmagenta;,f2,f2cblue;i,f2,f2c255148000,f2,f2cmagenta;,f2,f2cblue;i,f2,f2c255148000,f2,f2cmagenta;,f2,f2cblue;i,f2,f2c255148000,f2,f2cmagenta;,f2,f2cblue;i,f2,f2c255148000,f2,f2cmagenta;,f2,f2cblue;i,f2,f2c255148000,f2,f2cmagenta;,f2,f2cblue;i,f2,f2c255148000,f2,f2cmagenta;,f2,f2cblue;i,f2,f2c255148000! !!MySTLexicalAnalyzerStreamTestCase methodsFor: 'as yet unclassified' stamp: 'SZ 2/4/2008 12:15'!testCode1	| test |	test := MySTLexicalAnalyzerStream on: 'clear: size ^(Interval newFrom: 0 to: size - 1 step: 1) do: [:item| <primitive: 112> value: item].'.	self should: test next = ('clear:' -> #keymessage).	self should: test next = ('size' -> #name).	self should: test next = ('^' -> #token).	self should: test next = ('(' -> #token).	self should: test next = ('Interval' -> #name).	self should: test next = ('newFrom:' -> #keymessage).	self should: test next = ('0' -> #number).	self should: test next = ('to:' -> #keymessage).	self should: test next = ('size' -> #name).	self should: test next = ('-' -> #binmessage).	self should: test next = ('1' -> #number).	self should: test next = ('step:' -> #keymessage).	self should: test next = ('1' -> #number).	self should: test next = (')' -> #token).	self should: test next = ('do:' -> #keymessage).	self should: test next = ('[' -> #token).	self should: test next = (':item' -> #blockarg).	self should: test next = ('|' -> #binmessage).	self should: test next = ('<primitive: 112>' -> #primitive).	self should: test next = ('value:' -> #keymessage).	self should: test next = ('item' -> #name).	self should: test next = (']'->#token).	self should: test next = ('.' -> #token).	self should: test atEnd.! !!MySTLexicalAnalyzerStreamTestCase methodsFor: 'as yet unclassified' stamp: 'SZ 1/3/2008 10:42'!testCreation	self		should: ((MySTLexicalAnalyzerStream on: 'Object')				isMemberOf: MySTLexicalAnalyzerStream).!]style[(12 2 4 11 1 31 8 45)f2b,f2,f2cmagenta;,f2,f2b,f2,f2c255148000,f2! !!MySTLexicalAnalyzerStreamTestCase methodsFor: 'as yet unclassified' stamp: 'SZ 1/3/2008 11:14'!testKeymessage	| test |	test := MySTLexicalAnalyzerStream on: 'at:put: new: Asffggh1234:'.	self should: test next = ('at:' -> #keymessage).	self should: test next = ('put:' -> #keymessage).	self should: test next = ('new:' -> #keymessage).	self should: test next = ('Asffggh1234:' -> #keymessage).	self should: test atEnd.!]style[(14 3 5 4 4 4 25 5 27 3 4 9 4 9 5 4 11 4 4 9 4 9 6 4 11 4 4 9 4 9 6 4 11 4 4 9 4 9 14 4 11 28)f2b,f2,f2cblue;i,f2,f2cblue;i,f2,f2cmagenta;,f2,f2c255147000,f2,f2cmagenta;,f2,f2cblue;i,f2,f2c255147000,f2,f2c255147000,f2,f2cmagenta;,f2,f2cblue;i,f2,f2c255147000,f2,f2c255147000,f2,f2cmagenta;,f2,f2cblue;i,f2,f2c255147000,f2,f2c255147000,f2,f2cmagenta;,f2,f2cblue;i,f2,f2c255147000,f2,f2c255147000,f2! !!MySTLexicalAnalyzerStreamTestCase methodsFor: 'as yet unclassified' stamp: 'SZ 1/3/2008 10:37'!testNumbers	| test |	test := MySTLexicalAnalyzerStream on: ' 	123 0  -123	0.01		1212435436346.009234 		0.987		123 -0.09'.	self should: test next = ('123' -> #number).	self should: test next = ('0' -> #number).	self should: test next = ('-123'-> #number).	self should: test next = ('0.01' -> #float).	self should: test next = ('1212435436346.009234'->#float).	self should: test next = ('0.987' -> #float).	self should: test next = ('123' -> #number).	self should: test next = ('-0.09' -> #float).	self should: test atEnd.!]style[(11 3 5 4 4 4 25 5 65 3 4 9 4 9 17 3 4 9 4 9 15 3 4 9 4 9 17 3 4 22 17 3 4 9 4 9 31 3 4 22 18 3 4 9 4 9 17 3 4 9 4 9 18 3 4 9 4 1 6)f2b,f2,f2cblue;i,f2,f2cblue;i,f2,f2cmagenta;,f2,f2c255148000,f2,f2cmagenta;,f2,f2cblue;i,f2,f2c255148000,f2,f2cmagenta;,f2,f2cblue;i,f2,f2c255148000,f2,f2cmagenta;,f2,f2cblue;i,f2,f2c255148000,f2,f2cmagenta;,f2,f2c255148000,f2,f2cmagenta;,f2,f2cblue;i,f2,f2c255148000,f2,f2cmagenta;,f2,f2c255148000,f2,f2cmagenta;,f2,f2cblue;i,f2,f2c255148000,f2,f2cmagenta;,f2,f2cblue;i,f2,f2c255148000,f2,f2cmagenta;,f2,f2cblue;i,f2,f2c255148000! !!MySTLexicalAnalyzerStreamTestCase methodsFor: 'as yet unclassified' stamp: 'SZ 1/3/2008 11:20'!testSimpleAccess	| test |	test := MySTLexicalAnalyzerStream on: '123'.	self should: test next = ('123' -> #number).	self should: test atEnd.!]style[(16 3 5 4 4 4 25 5 5 3 4 9 4 9 17 27)f2b,f2,f2cblue;i,f2,f2cblue;i,f2,f2cmagenta;,f2,f2c255147000,f2,f2cmagenta;,f2,f2cblue;i,f2,f2c255147000,f2! !!MySTLexicalAnalyzerStreamTestCase methodsFor: 'as yet unclassified' stamp: 'SZ 1/3/2008 10:33'!testWords	| test |	test := MySTLexicalAnalyzerStream on: ' 	Word word  word	word		word				word Word123 '.	self should: test next = ('Word' -> #name).	self should: test next = ('word' -> #name).	self should: test next = ('word' -> #name).	self should: test next = ('word' -> #name).	self should: test next = ('word' -> #name).	self should: test next = ('word' -> #name).	self should: test next = ('Word123' -> #name).	self should: test atEnd.!]style[(9 3 5 4 4 4 25 5 51 3 4 9 4 9 6 4 5 4 4 9 4 9 6 4 5 4 4 9 4 9 6 4 5 4 4 9 4 9 6 4 5 4 4 9 4 9 6 4 5 4 4 9 4 9 6 4 5 4 4 9 4 9 9 4 5 28)f2b,f2,f2cblue;i,f2,f2cblue;i,f2,f2cmagenta;,f2,f2c255148000,f2,f2cmagenta;,f2,f2cblue;i,f2,f2c255148000,f2,f2c255148000,f2,f2cmagenta;,f2,f2cblue;i,f2,f2c255148000,f2,f2c255148000,f2,f2cmagenta;,f2,f2cblue;i,f2,f2c255148000,f2,f2c255148000,f2,f2cmagenta;,f2,f2cblue;i,f2,f2c255148000,f2,f2c255148000,f2,f2cmagenta;,f2,f2cblue;i,f2,f2c255148000,f2,f2c255148000,f2,f2cmagenta;,f2,f2cblue;i,f2,f2c255148000,f2,f2c255148000,f2,f2cmagenta;,f2,f2cblue;i,f2,f2c255148000,f2,f2c255148000,f2! !