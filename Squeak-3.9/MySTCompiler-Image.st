Object subclass: #FakeClass	instanceVariableNames: 'classname classsuper classinstvars classvars classpooldicts'	classVariableNames: ''	poolDictionaries: ''	category: 'MySTCompiler-Image'!!FakeClass methodsFor: 'as yet unclassified' stamp: 'SZ 1/28/2008 18:29'!className	^classname.		! !!FakeClass methodsFor: 'as yet unclassified' stamp: 'SZ 1/28/2008 18:24'!className: aString	classname _ aString.		! !!FakeClass methodsFor: 'as yet unclassified' stamp: 'SZ 1/28/2008 18:29'!classSuper	^classsuper		! !!FakeClass methodsFor: 'as yet unclassified' stamp: 'SZ 1/28/2008 18:24'!classSuper: aString	classsuper _ aString.		! !!FakeClass methodsFor: 'as yet unclassified' stamp: 'SZ 1/28/2008 18:26'!classVariableNames	^classvars! !!FakeClass methodsFor: 'as yet unclassified' stamp: 'SZ 1/28/2008 18:30'!classVariableNames: aCollection	classvars _ aCollection.! !!FakeClass methodsFor: 'as yet unclassified' stamp: 'SZ 1/28/2008 18:26'!instanceVariableNames	^classinstvars.! !!FakeClass methodsFor: 'as yet unclassified' stamp: 'SZ 1/28/2008 18:30'!instanceVariableNames: aCollection	classinstvars _ aCollection.! !!FakeClass methodsFor: 'as yet unclassified' stamp: 'SZ 1/28/2008 18:29'!poolDictionaries	^classpooldicts.! !!FakeClass methodsFor: 'as yet unclassified' stamp: 'SZ 1/28/2008 18:30'!poolDictionaries: aCollection	classpooldicts _ aCollection.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!FakeClass class	instanceVariableNames: ''!!FakeClass class methodsFor: 'as yet unclassified' stamp: 'SZ 1/30/2008 16:13'!newForTest1	^super new		className: 'TestClass';		classSuperName: 'Object';		instanceVariableNames: (OrderedCollection with: 'inst1 inst2');		classVariableNames: (OrderedCollection with: 'ClassVar1 ClassVar2');		poolDictionaries: (OrderedCollection with: 'pool1 pool2');		value.! !Object subclass: #FakeMethod	instanceVariableNames: 'forClass message bytecode literals tmpcount argcount'	classVariableNames: ''	poolDictionaries: ''	category: 'MySTCompiler-Image'!!FakeMethod methodsFor: 'as yet unclassified' stamp: 'SZ 1/29/2008 12:42'!forClass	^forClass.! !!FakeMethod methodsFor: 'as yet unclassified' stamp: 'SZ 1/29/2008 12:41'!forClass: aString	forClass _ aString.! !!FakeMethod methodsFor: 'as yet unclassified' stamp: 'SZ 2/10/2008 16:14'!literals	^literals.! !!FakeMethod methodsFor: 'as yet unclassified' stamp: 'SZ 2/10/2008 15:42'!literals: anOrderedCollection	literals _ anOrderedCollection.! !!FakeMethod methodsFor: 'as yet unclassified' stamp: 'SZ 1/30/2008 15:22'!message	^message! !!FakeMethod methodsFor: 'as yet unclassified' stamp: 'SZ 1/30/2008 15:22'!message: aString	message_aString.! !!FakeMethod methodsFor: 'accessing' stamp: 'SZ 2/10/2008 16:14'!argCount	^argcount.! !!FakeMethod methodsFor: 'accessing' stamp: 'SZ 2/10/2008 15:44'!argCount: anInteger	argcount _ anInteger.! !!FakeMethod methodsFor: 'accessing' stamp: 'SZ 2/10/2008 16:14'!bytecode	^bytecode! !!FakeMethod methodsFor: 'accessing' stamp: 'SZ 2/10/2008 15:43'!bytecode: anOrderedCollection	bytecode _ anOrderedCollection.! !!FakeMethod methodsFor: 'accessing' stamp: 'SZ 2/10/2008 16:15'!inTheClass	^forClass .! !!FakeMethod methodsFor: 'accessing' stamp: 'SZ 2/11/2008 19:06'!inTheClass: aString	^forClass _ aString.! !!FakeMethod methodsFor: 'accessing' stamp: 'SZ 2/10/2008 16:14'!tmpCount	^tmpcount.! !!FakeMethod methodsFor: 'accessing' stamp: 'SZ 2/10/2008 15:44'!tmpCount: anInteger.	tmpcount _ anInteger.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!FakeMethod class	instanceVariableNames: ''!!FakeMethod class methodsFor: 'as yet unclassified' stamp: 'SZ 2/10/2008 16:22'!newForTestAddMethod1a	^super new forClass: 'Object'; 		message: 'testmethod1a'; 		argCount: 0; 		tmpCount: 3; 		bytecode: #(164 0 1 116 0 3 148 2 208); 		literals: (OrderedCollection 					with: (MySTExpressionObject withName: 'Object') 					with: (MySTExpressionLiteral withName: 'value') 					with: (MySTExpressionLiteral withName: 'new:') 					with: (MySTExpressionLiteral withName: '4')).! !TestCase subclass: #ImageTestCase	instanceVariableNames: 'testImage'	classVariableNames: ''	poolDictionaries: ''	category: 'MySTCompiler-Image'!!ImageTestCase methodsFor: 'as yet unclassified' stamp: 'Saemon Zixel 6/22/2007 22:24'!testAddClass	"create MetaClass_ ???"	testImage addClass: 'TestClass'.	self		should: [(testImage getClass: 'Test1') name == 'Test1'].	self		should: [(testImage getClass: 'MetaClass_Test1') name == 'MetaClass_Test1']!]style[(12 2 23 2 9 11 11 3 4 13 9 11 7 10 7 4 4 13 9 11 17 10 17 1)f2b,f2,f2c148046000,f2,f2cmagenta;,f2,f2c255148000,f2,f2cmagenta;,f2,f2cmagenta;,f2,f2c255148000,f2,f2c255148000,f2,f2cmagenta;,f2,f2cmagenta;,f2,f2c255148000,f2,f2c255148000,f2! !!ImageTestCase methodsFor: 'as yet unclassified' stamp: 'SZ 1/28/2008 18:46'!testAddClass1	| testclass metatestclass fakeclass |	"testImage createStartClassesAndObjects."	fakeclass _ FakeClass newForTest1.	testImage addClass: fakeclass.	testclass := testImage classAt: 'TestClass'.	self should: (testclass className = 'TestClass').	metatestclass := testImage classAt: 'MetaClass_TestClass'.	"self should: (metatestclass isKindOf: MySTCompiledClass)."	self should: metatestclass className = 'MetaClass_TestClass'.! !!ImageTestCase methodsFor: 'as yet unclassified' stamp: 'SZ 12/30/2007 19:42'!testAddFullClass	| testclass metatestclass |	testImage createStartClassesAndObjects.	testImage		addClass: 'TestClass'		subclass: 'Object'		instanceVariableNames: 'inst1 inst2 inst3'		classVariableNames: 'cl1 cl2 cl3'.	testclass := testImage getClass: 'TestClass'.	self should: (testclass isMemberOf: MySTCompiledClass).	metatestclass := testImage getClass: 'MetaClass_TestClass'.	self should: (metatestclass isMemberOf: MySTCompiledClass).	self should: metatestclass name = 'MetaClass_TestClass'!]style[(16 3 24 4 9 32 9 13 11 13 8 26 19 23 13 3 9 4 9 11 11 3 4 10 9 34 13 4 9 11 21 3 4 9 1 13 34 4 9 13 8 21)f2b,f2,f2cblue;i,f2,f2cmagenta;,f2,f2cmagenta;,f2,f2c255148000,f2,f2c255148000,f2,f2c255148000,f2,f2c255148000,f2,f2cblue;i,f2,f2cmagenta;,f2,f2c255148000,f2,f2cmagenta;,f2,f2cblue;i,f2,f2cblue;i,f2,f2cmagenta;,f2,f2c255148000,f2,f2cmagenta;,f2,f2b,f2cblue;i,f2,f2cmagenta;,f2,f2cblue;i,f2,f2c255148000! !!ImageTestCase methodsFor: 'as yet unclassified' stamp: 'SZ 1/28/2008 18:50'!testAddMethod	| testclass |	self should: testImage classClass className = 'Class'.	testImage addMethod: MockMethods testMethod1 to: 'Class'.	testclass := testImage classAt: 'Class'.	self shouldnt: (testclass methodAt: 'testMethod1') = nil.	self should: (testclass methodAt: 'testMethod1') message = 'testMethod1'.! !!ImageTestCase methodsFor: 'as yet unclassified' stamp: 'Saemon Zixel 6/20/2007 20:00'!testAddObject	| obj |	testImage		addObject: 1		class: 1		flags: 1		data: 1.	self		shouldnt: [(testImage at: 1)				== nil].	obj := testImage at: 1.	self		should: [obj num == 1].	self should: [obj class == 1].	self should: [obj flags == 1].	self should: [obj size == 4].	self should: [obj data == #(0 0 0 1) asOrderedCollection].!]style[(13 3 4 4 9 14 1 10 1 10 1 9 1 3 4 15 9 5 1 9 3 4 3 4 9 5 1 3 4 12 3 8 1 157)f2b,f2,f2cblue;i,f2,f2cmagenta;,f2,f2c255148000,f2,f2c255148000,f2,f2c255148000,f2,f2c255148000,f2,f2cmagenta;,f2,f2cmagenta;,f2,f2c255148000,f2,f2cmagenta;,f2,f2cblue;i,f2,f2cmagenta;,f2,f2c255148000,f2,f2cmagenta;,f2,f2cblue;i,f2,f2c255148000,f2! !!ImageTestCase methodsFor: 'as yet unclassified' stamp: 'Saemon Zixel 6/22/2007 21:59'!testCreateClassAndMetaClass	testImage createClassAndMetaClass.	self		should: [(testImage getClass: 'Class') name == 'Class'].	self should: [(testImage getClass: 'MetaClass_Class') name == 'MetaClass_Class'].!]style[(27 2 9 27 4 13 9 11 7 10 7 85)f2b,f2,f2cmagenta;,f2,f2cmagenta;,f2,f2cmagenta;,f2,f2c255148000,f2,f2c255148000,f2! !!ImageTestCase methodsFor: 'as yet unclassified' stamp: 'Saemon Zixel 6/22/2007 22:38'!testCreateSymbolClass	testImage createSymbolClass.	self		should: [(testImage getClass: 'Symbol') name == 'Symbol'].	self		should: [(testImage getClass: 'MetaClass_Symbol') name == 'MetaClass_Symbol']!]style[(21 2 9 21 4 13 9 11 8 10 8 4 4 13 9 11 18 10 18 1)f2b,f2,f2cmagenta;,f2,f2cmagenta;,f2,f2cmagenta;,f2,f2c255148000,f2,f2c255148000,f2,f2cmagenta;,f2,f2cmagenta;,f2,f2c255148000,f2,f2c255148000,f2! !!ImageTestCase methodsFor: 'as yet unclassified' stamp: 'Saemon Zixel 6/22/2007 22:36'!testCreateUndefinedClassAndNil	testImage createUndefinedClassAndObject.	self		should: [(testImage getClass: 'UndefinedObject') name == 'UndefinedObject'].	self		should: [(testImage getClass: 'MetaClass_UndefinedObject') name == 'MetaClass_UndefinedObject'].	self		should: [testImage getNil class == 'UndefinedObject']!]style[(30 2 9 33 4 13 9 11 17 10 17 4 4 13 9 11 27 10 27 4 4 12 9 17 17 1)f2b,f2,f2cmagenta;,f2,f2cmagenta;,f2,f2cmagenta;,f2,f2c255148000,f2,f2c255148000,f2,f2cmagenta;,f2,f2cmagenta;,f2,f2c255148000,f2,f2c255148000,f2,f2cmagenta;,f2,f2cmagenta;,f2,f2c255148000,f2! !!ImageTestCase methodsFor: 'as yet unclassified' stamp: 'Saemon Zixel 6/20/2007 19:55'!testNullObject	self shouldnt: [(testImage at: 0) == nil].!]style[(14 2 4 13 9 5 1 5 5)f2b,f2,f2cmagenta;,f2,f2cmagenta;,f2,f2c255148000,f2,f2cmagenta;! !Object subclass: #MySTClass	instanceVariableNames: 'className superClassName methodDictionary instances objClass globalDictionary'	classVariableNames: ''	poolDictionaries: ''	category: 'MySTCompiler-Image'!!MySTClass methodsFor: 'adding' stamp: 'SZ 1/30/2008 15:32'!addMethod: aMySTcompiledMethod 	aMySTcompiledMethod forClass = className 		ifFalse: [^nil]		ifTrue: [methodDictionary at: aMySTcompiledMethod message put: aMySTcompiledMethod ].! !!MySTClass methodsFor: 'accessing' stamp: 'SZ 2/7/2008 16:39'!className	^className.! !!MySTClass methodsFor: 'accessing' stamp: 'SZ 1/29/2008 12:22'!className: aString 	className _ aString.! !!MySTClass methodsFor: 'accessing' stamp: 'SZ 2/7/2008 15:58'!classSuperName	^superClassName ! !!MySTClass methodsFor: 'accessing' stamp: 'SZ 1/30/2008 16:00'!classSuperName: aString 	superClassName _ aString.! !!MySTClass methodsFor: 'accessing' stamp: 'SZ 2/9/2008 11:47'!instanceVariableNames: anOrderedCollection	instances _ anOrderedCollection.! !!MySTClass methodsFor: 'accessing' stamp: 'SZ 2/17/2008 12:38'!metaClassName	self isMetaClass		ifTrue: [^'MetaClass']		ifFalse: [^'MetaClass_' , className.].! !!MySTClass methodsFor: 'accessing' stamp: 'SZ 1/30/2008 15:35'!methods	^methodDictionary.! !!MySTClass methodsFor: 'accessing' stamp: 'SZ 1/29/2008 12:39'!objClass: aString 	objClass _ aString.! !!MySTClass methodsFor: 'associating' stamp: 'SZ 2/9/2008 12:02'!instances	| sclass |	(className = 'Object') | (className = 'MetaClass_Object')		ifTrue: [^instances].	sclass _ globalDictionary at: superClassName ifAbsent: [nil].	sclass 		ifNil: [self error:'class hierarchy damaged!!' .^nil]		ifNotNil: [^sclass instances , instances.].! !!MySTClass methodsFor: 'creation' stamp: 'SZ 1/30/2008 15:55'!inDictionary: aMySTGlobalDictionary 	globalDictionary _ aMySTGlobalDictionary.! !!MySTClass methodsFor: 'creation' stamp: 'SZ 2/8/2008 19:12'!initialize	objClass _ 'Object'.	superClassName _ 'Object'.	methodDictionary _ Dictionary new.	instances _ OrderedCollection new.! !!MySTClass methodsFor: 'testing' stamp: 'SZ 1/30/2008 16:54'!isMetaClass	^className size > 10 and: [(className first: 10) = 'MetaClass_'].	! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!MySTClass class	instanceVariableNames: ''!!MySTClass class methodsFor: 'instance creation' stamp: 'SZ 1/30/2008 17:00'!newAs: aString 	^super new className: aString.! !!MySTClass class methodsFor: 'instance creation' stamp: 'SZ 1/30/2008 16:53'!newAsMeta: aString 	^(super new className: aString) instanceVariableNames: (OrderedCollection with: 'name' with: 'superclass' with: 'methods' with: 'instCount').! !Dictionary subclass: #MySTGlobalDictionary	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'MySTCompiler-Image'!!MySTGlobalDictionary methodsFor: 'adding' stamp: 'SZ 2/8/2008 13:33'!addClass: aString superClass: aString2 instanceVariableNames: aOrderedCollection classVariableNames: aOrderedCollection2	| newclass |			newclass _ MySTClass newAs: aString.	newclass inDictionary: self.	newclass classSuperName: aString2.	newclass instanceVariableNames: aOrderedCollection.	newclass isMetaClass		ifFalse: [			self addClass: 'MetaClass_' , aString 				superClass: 'MetaClass_' , aString2 				instanceVariableNames: aOrderedCollection2				classVariableNames: nil.			newclass objClass: 'MetaClass_' , aString.]		ifTrue: [newclass objClass: 'MetaClass'.].			self at: aString put: newclass.! !!MySTGlobalDictionary methodsFor: 'adding' stamp: 'SZ 2/9/2008 11:09'!addMethod: aMySTCompiledMethod toClass: aString 	| class |	class _ self at: aString ifAbsent: [nil].	class 		ifNil: [^nil]		ifNotNil: [^class addMethod: aMySTCompiledMethod ].	! !!MySTGlobalDictionary methodsFor: 'adding' stamp: 'SZ 1/30/2008 15:34'!addMethod: aMySTCompiledMethod toMetaClass: aString 	^self addMethod: aMySTCompiledMethod toClass: 'MetaClass_' , aString.! !!MySTGlobalDictionary methodsFor: 'as yet unclassified' stamp: 'SZ 2/12/2008 19:57'!addToImage:	aMySTImage	| addedclasses |		addedclasses _ Set new.	[addedclasses size = self size] whileFalse:		[self do: [:class | 			(addedclasses includes: class)				ifFalse: [					class isMetaClass						ifFalse: [(aMySTImage classAt: class classSuperName) isNil not & (aMySTImage classAt: class metaClassName) isNil not							ifTrue: [aMySTImage addClass: class. 								addedclasses add: class.]] 						ifTrue: [(aMySTImage classAt: class classSuperName) isNil not							ifTrue: [aMySTImage addClass: class. 								addedclasses add: class.]].						].				]		].! !!MySTGlobalDictionary methodsFor: 'as yet unclassified' stamp: 'SZ 2/12/2008 19:05'!createDoRelocationMethodForObjectClass	"Smalltalk - literal(0)	'at: - literal(1) ...'"	| temp |	temp _ FakeMethod new.	temp inTheClass: 'MetaClass_Object'.	temp bytecode: #(116 0 0 116 1 1 116 2 2 116 3 3 116 4 4 116 5 5 116 6 6 32 5 208).	temp literals: (OrderedCollection new			add: (MySTExpressionLiteral withName: '6');			add: 0;			add: 0;			add: 0;			add: 0;			add: 0;			add: 0;			value).	temp argCount: 0.	temp tmpCount: 0.	temp message: 'doRelocation'.	self addMethod: temp toClass: 'MetaClass_Object'.! !!MySTGlobalDictionary methodsFor: 'as yet unclassified' stamp: 'SZ 2/11/2008 20:09'!createValueMethodForSymbolClass	"Smalltalk - literal(0)	'at: - literal(1) ...'"	| temp |	temp _ FakeMethod new.	temp inTheClass: 'Symbol'.	temp bytecode: #(112 0 164 0 1 208).	temp literals: (OrderedCollection with: (MySTExpressionLiteral withName: 'temp') with: (MySTExpressionLiteral withName: 'at:')).	temp argCount: 0.	temp tmpCount: 0.	temp message: 'value'.	self addMethod: temp toClass: 'Symbol'.! !!MySTGlobalDictionary methodsFor: 'as yet unclassified' stamp: 'SZ 2/11/2008 19:24'!createValueMethodsForBlockClass	| temp |	temp _ FakeMethod new.	temp inTheClass: 'Block'.	temp bytecode: #(132 0 208).	temp literals: nil.	temp argCount: 0.	temp tmpCount: 0.	temp message: 'value'.	self addMethod: temp toClass: 'Block'.		temp _ FakeMethod new.	temp inTheClass: 'Block'.	temp bytecode: #(132 0 208).	temp literals: nil.	temp argCount: 0.	temp tmpCount: 0.	temp message: 'value:'.	self addMethod: temp toClass: 'Block'.		temp _ FakeMethod new.	temp inTheClass: 'Block'.	temp bytecode: #(132 0 208).	temp literals: nil.	temp argCount: 0.	temp tmpCount: 0.	temp message: 'value:value:'.	self addMethod: temp toClass: 'Block'.		temp _ FakeMethod new.	temp inTheClass: 'Block'.	temp bytecode: #(132 0 208).	temp literals: nil.	temp argCount: 0.	temp tmpCount: 0.	temp message: 'value:value:value:'.	self addMethod: temp toClass: 'Block'.	temp _ FakeMethod new.	temp inTheClass: 'Block'.	temp bytecode: #(132 0 208).	temp literals: nil.	temp argCount: 0.	temp tmpCount: 0.	temp message: 'value:value:value:value:'.	self addMethod: temp toClass: 'Block'.! !!MySTGlobalDictionary methodsFor: 'as yet unclassified' stamp: 'SZ 1/30/2008 18:18'!initialize	super initialize.	self addClass: 'Object' 		superClass: 'Object' 		instanceVariableNames: OrderedCollection new 		classVariableNames: (OrderedCollection with: 'name' with: 'superclass' with: 'methods' with: 'instCount').	(self at: 'MetaClass_Object') classSuperName: 'Object'.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!MySTGlobalDictionary class	instanceVariableNames: ''!!MySTGlobalDictionary class methodsFor: 'as yet unclassified' stamp: 'SZ 1/30/2008 16:22'!new	^super new initialize.! !TestCase subclass: #MySTGlobalDictionaryTestCase	instanceVariableNames: 'GDict'	classVariableNames: ''	poolDictionaries: ''	category: 'MySTCompiler-Image'!!MySTGlobalDictionaryTestCase methodsFor: 'as yet unclassified' stamp: 'SZ 1/29/2008 10:50'!setUp	GDict _ MySTGlobalDictionary new.! !!MySTGlobalDictionaryTestCase methodsFor: 'as yet unclassified' stamp: 'SZ 1/30/2008 16:18'!testAddClass	GDict addClass: 'TestClass'		superClass: 'Object'		instanceVariableNames: (OrderedCollection with: 'inst1' with: 'inst2' with: 'inst3')		classVariableNames: (OrderedCollection with: 'Var1' with: 'Var2' with: 'Var3').	self shouldnt: (GDict at: 'TestClass') isNil.	self shouldnt: (GDict at: 'MetaClass_TestClass' ifAbsent: [nil]) isNil.! !!MySTGlobalDictionaryTestCase methodsFor: 'as yet unclassified' stamp: 'SZ 1/30/2008 16:18'!testAddMethod	GDict addClass: 'TestClass'		superClass: 'Object'		instanceVariableNames: (OrderedCollection with: 'inst1' with: 'inst2' with: 'inst3')		classVariableNames: (OrderedCollection with: 'Var1' with: 'Var2' with: 'Var3').	GDict addMethod: FakeMethod newForTestAddMethod1a toClass: 'TestClass'.	GDict addMethod: FakeMethod newForTestAddMethod1a toMetaClass: 'TestClass'.	self should: (GDict at: 'TestClass') methods size = 1.	self shouldnt: ((GDict at: 'TestClass') methods at: 'testmethod1a') isNil.	self should: (GDict at: 'MetaClass_TestClass') methods size = 0.! !!MySTGlobalDictionaryTestCase methodsFor: 'as yet unclassified' stamp: 'SZ 1/30/2008 16:25'!testGetInstances	GDict addClass: 'TestClass'		superClass: 'Object'		instanceVariableNames: (OrderedCollection with: 'inst1' with: 'inst2' with: 'inst3')		classVariableNames: (OrderedCollection with: 'Var1' with: 'Var2' with: 'Var3').	GDict addClass: 'TestClass2'		superClass: 'TestClass'		instanceVariableNames: (OrderedCollection with: 'inst4' with: 'inst5' with: 'inst6')		classVariableNames: (OrderedCollection with: 'Var4' with: 'Var5' with: 'Var6').	self should: (GDict at: 'TestClass2') instances = (OrderedCollection with: 'inst1' with: 'inst2' with: 'inst3' with: 'inst4' with: 'inst5' with:'inst6').	self should: (GDict at: 'MetaClass_TestClass2') instances = ((OrderedCollection with: 'name' with: 'superclass' with: 'methods' with: 'instCount') add: 'Var1'; add: 'Var2'; add: 'Var3'; add: 'Var4'; add: 'Var5'; add: 'Var6'; value).! !Collection subclass: #MySTImage	instanceVariableNames: 'classes objects startmethodstate defaultargssize'	classVariableNames: ''	poolDictionaries: ''	category: 'MySTCompiler-Image'!!MySTImage methodsFor: 'adding' stamp: 'SZ 2/10/2008 16:26'!add: aMySTObject 	|type|	(aMySTObject isKindOf: MySTClass)		ifTrue: [^self addClass: aMySTObject].	(aMySTObject isMemberOf: MySTExpressionLiteral)		ifTrue: [			type _ aMySTObject literalType.			type = #symbol				ifTrue: [^self addSymbol: aMySTObject value].			type = #number				ifTrue: [^self addInteger: aMySTObject value asInteger].			type = #string				ifTrue: [^self addString: aMySTObject value].			type = #char				ifTrue: [^self addCharacter: aMySTObject value].				].	(aMySTObject isMemberOf: MySTExpressionObject)		ifTrue: [^self addSymbol: aMySTObject value].	(aMySTObject isMemberOf: MySTExpressionBlock)		ifTrue: [^self addBlock: aMySTObject].	(aMySTObject isKindOf: Integer)		ifTrue: [^self addInteger: aMySTObject].	self error: 'not recognized!!' with: aMySTObject.		! !!MySTImage methodsFor: 'adding' stamp: 'SZ 2/11/2008 19:18'!addArray: anArray	"anArray = nil -> literals(0) for block method value"	| array |	array _ OrderedCollection new.	anArray 		ifNil: [array add: 0]		ifNotNil: [anArray do: [:item | array add: (self add: item)]].	^self addObject:		(MySTObject 			withObjects: array			class: (classes at: 'Array' ifAbsent: [0])).! !!MySTImage methodsFor: 'adding' stamp: 'SZ 2/10/2008 17:24'!addBlock: aMySTExpressionBlock	| bytecode literals argcount tmpcount inthemethod |	bytecode _ self addObject: (MySTObject with: aMySTExpressionBlock bytecode).	literals _ self addArray: aMySTExpressionBlock literals.	argcount _ self addInteger: aMySTExpressionBlock argCount.	tmpcount _ self addInteger: aMySTExpressionBlock tmpCount.	inthemethod _ 0.	^self addObject: (MySTObject 				withObjects: (OrderedCollection 						with: bytecode 						with: literals 						with: argcount 						with: tmpcount 						with: inthemethod 						with: 0) 				class: (classes at: 'Block' ifAbsent: [0])).! !!MySTImage methodsFor: 'adding' stamp: 'SZ 2/10/2008 15:07'!addCharacter: aMySTExpressionLiteral	^self addObject:	 	(MySTObject 			with: aMySTExpressionLiteral value 			class: (classes at: 'Character' ifAbsent: [0])).! !!MySTImage methodsFor: 'adding' stamp: 'SZ 2/17/2008 18:25'!addClass: aMySTClass 	| classnum newclass classBody |		"Create class object if absent"	classnum _ classes 					at: aMySTClass className					ifAbsent: [						newclass _ MySTObject withObjects: (OrderedCollection 																with: (self addSymbol: aMySTClass className) 																with: 0 																with: 0 																with: (self addInteger: 0)).						classes 							at: aMySTClass className 							put: (self addObject: newclass)].		"Class class"	(self at: classnum) class: (classes at: aMySTClass metaClassName ifAbsent: [0]).		classBody _ (self at: classnum) objects.		"class name"	(classBody at: 1) = 0		ifTrue: [classBody at: 1 put: (self addSymbol: aMySTClass className)].		"super"		classBody at: 2 put: (classes at: aMySTClass classSuperName ifAbsent: [0]).		"methods"	classBody at: 3 put: (self addMethodDictionary: aMySTClass methods).			"instance count"	(self at: (classBody at: 4)) valueAsInteger: aMySTClass instances size.			(self at: classnum) objects: classBody.	^classnum.! !!MySTImage methodsFor: 'adding' stamp: 'SZ 2/11/2008 17:47'!addDictionary: aDictionary	| array result |	array _ OrderedCollection new.	aDictionary keysAndValuesDo: [:name :value | 		array add: (self addSymbol: name).		array add: value.].	result _ MySTObject withObjects: array class: (classes at: 'CompactDictionary' ifAbsent: [0]).	^self addObject: result.! !!MySTImage methodsFor: 'adding' stamp: 'SZ 2/10/2008 15:11'!addInteger: aMySTExpressionObject	^self addObject:		(MySTObject 			with: aMySTExpressionObject value 			class: (classes at: 'Integer' ifAbsent: [0])).! !!MySTImage methodsFor: 'adding' stamp: 'SZ 2/10/2008 17:32'!addMethod: aMySTCompiledMethod	| bytecode literals name argcount tmpcount intheclass |		bytecode _ self addObject: (MySTObject with: aMySTCompiledMethod bytecode).	literals _ self addArray: aMySTCompiledMethod literals.	argcount _ self addInteger: aMySTCompiledMethod argCount.	tmpcount _ self addInteger: aMySTCompiledMethod tmpCount.	name _ self addSymbol: aMySTCompiledMethod message.	intheclass _ classes 					at: aMySTCompiledMethod inTheClass 					ifAbsent: [self halt. self warning: 'unknow class' with: aMySTCompiledMethod. 0].						^self addObject: (MySTObject 			withObjects: (OrderedCollection 				with: bytecode 				with: literals 				with: argcount 				with: tmpcount 				with: intheclass 				with: name) 			class: (classes at: 'Method' ifAbsent: [0])).! !!MySTImage methodsFor: 'adding' stamp: 'SZ 2/10/2008 16:46'!addMethodDictionary: aDictionary	| methodDict result |	methodDict _ OrderedCollection new.	aDictionary keysAndValuesDo: [:name :method | 		methodDict add: (self addSymbol: name).		methodDict add: (self addMethod: method).].	result _ MySTObject withObjects: methodDict class: (classes at: 'MethodDictionary' ifAbsent: [0]).	^self addObject: result.! !!MySTImage methodsFor: 'adding' stamp: 'SZ 2/7/2008 16:21'!addObject: aMySTObject 	objects add: aMySTObject.	aMySTObject number: objects size.	^objects size.! !!MySTImage methodsFor: 'adding' stamp: 'SZ 3/2/2008 17:07'!addSmalltalkDictionary	| stdict temp |	stdict _  classes at: 'Smalltalk' ifAbsent: [nil].	stdict 		ifNotNil: [^stdict].	classes at: 'Smalltalk' put: 0.	stdict _ self addDictionary: classes.	temp _ (self at: stdict) objects.	temp doWithIndex: [:value :index | value > 1			ifTrue: [(self at: value) value = 'Smalltalk' asByteArray				ifTrue: [temp at: index+1 put: stdict.]]].	(self at: stdict) objects: temp.	classes at: 'Smalltalk' put: stdict.	^stdict.! !!MySTImage methodsFor: 'adding' stamp: 'SZ 2/23/2008 19:37'!addString: aMySTExpressionLiteral	^self addObject:	 	(MySTObject 			with: aMySTExpressionLiteral value 			class: (classes at: 'String' ifAbsent: [0])).! !!MySTImage methodsFor: 'adding' stamp: 'SZ 2/7/2008 16:22'!addSymbol: aMySTExpressionObject	^self addObject:	 	(MySTObject 			with: aMySTExpressionObject value 			class: (classes at: 'Symbol' ifAbsent: [0])).! !!MySTImage methodsFor: 'as yet unclassified' stamp: 'SZ 2/7/2008 16:35'!at: anInteger	^objects at: anInteger ifAbsent: [nil].! !!MySTImage methodsFor: 'as yet unclassified' stamp: 'SZ 3/1/2008 16:59'!createStartClasses	| temp temp2 |	temp _ self addObject: (MySTObject withObjects: #(0 0 0 0)).	classes at: 'Object' put: temp.		temp2 _ self addObject: (MySTObject withObjects: #(0 0 0 0)).	classes at: 'Integer' put: temp2.	(self at: temp2) objects: (OrderedCollection with: 0 with: temp with: 0 with: (self addInteger: 0)).		(self at: temp) objects: (OrderedCollection with: 0 with: temp with: 0 with: (self addInteger: 0)).	temp _ self addObject: (MySTObject withObjects: (OrderedCollection with: 0 with: (classes at: 'Object') with: 0 with: (self addInteger: 0))).	classes at: 'MetaClass' put: temp.		temp _ self addObject: (MySTObject 							withObjects: (OrderedCollection with: 0 with: (classes at: 'MetaClass') with: 0 with: (self addInteger: 0)) 							class: (classes at: 'MetaClass')).	classes at: 'MetaClass_Object' put: temp.		temp _ self addObject: (MySTObject 							withObjects: (OrderedCollection with: 0 with: (classes at: 'MetaClass_Object') with: 0 with: (self addInteger: 0)) 							class: (classes at: 'MetaClass')).	classes at: 'MetaClass_MetaClass' put: temp.	(self at: (classes at: 'MetaClass')) class: temp.		temp _ self addObject: (MySTObject 							withObjects: (OrderedCollection with: 0 with: (classes at: 'MetaClass_Object') with: 0 with: (self addInteger: 0)) 							class: (classes at: 'MetaClass')).	classes at: 'MetaClass_Integer' put: temp.		self addClass: 'Class' super: 'Object' metaClass: 'MetaClass_Class'.		self addClass: 'String' super: 'Object' metaClass: 'MetaClass_String'.		self addClass: 'Symbol' super: 'String' metaClass: 'MetaClass_Symbol'.		self addClass: 'CompactDictionary' super: 'Object' metaClass: 'MetaClass_CompactDictionary'.		self addClass: 'MethodDictionary' super: 'CompactDictionary' metaClass: 'MetaClass_MethodDictionary'.		self addClass: 'Method' super: 'Object' metaClass: 'MetaClass_Method'.		self addClass: 'Block'	 super: 'Object' metaClass: 'MetaClass_Block'.			self addClass: 'Character' super: 'Object' metaClass: 'MetaClass_Character'.		self addClass: 'Array' super: 'Object' metaClass: 'MetaClass_Array'.		temp _ self addClass: 'UndefinedObject' super: 'Object' metaClass: 'MetaClass_UndefinedObject'.	temp _ self addObject: (MySTObject with: #() class: temp).	classes at: 'nil' put: temp.		self addClass: 'Boolean' super: 'Object' metaClass: 'MetaClass_Boolean'.		temp _ self addClass: 'False' super: 'Boolean' metaClass: 'MetaClass_False'.	temp _ self addObject: (MySTObject with: #() class: temp).	classes at: 'false' put: temp.	temp _ self addClass: 'True' super: 'Boolean' metaClass: 'MetaClass_True'.	temp _ self addObject: (MySTObject with: #() class: temp).	classes at: 'true' put: temp.		! !!MySTImage methodsFor: 'as yet unclassified' stamp: 'SZ 2/7/2008 19:14'!error: aString with: anObject	anObject inspect.	self error: aString.	self halt.! !!MySTImage methodsFor: 'as yet unclassified' stamp: 'SZ 2/13/2008 18:37'!initialize	classes _ Dictionary new.	objects _ OrderedCollection new.	defaultargssize _ 10.! !!MySTImage methodsFor: 'as yet unclassified' stamp: 'SZ 3/2/2008 17:05'!saveToFile: aString	| stream temp |	self relocateSmalltalkDictionary.	"self relocateConstantsAndClasses."	self connectSuperInMetaClassObjectToClass.	stream _ FileStream newFileNamed: aString.	stream binary.	stream nextPutAll: ((MySTObject with: #() class: 0) number: 0; yourself).	objects do: [:obj | stream nextPutAll: obj].	temp _ ByteArray new: 4.	temp unsignedLongAt: 1 put: self addSmalltalkDictionary bigEndian: false.	stream nextPutAll: temp.	stream close.	objects last number inspect.	! !!MySTImage methodsFor: 'as yet unclassified' stamp: 'SZ 3/2/2008 16:51'!startupMethod: aString class: aString2 self: anInteger	| methodState startclass startmethod |		(anInteger isNil or: [anInteger > objects size])		ifTrue: [^self error: 'self not correct!!'].	startclass _ self classAt: aString2.	startmethod _ (self getDictionary: (self at: startclass) objects third) at: aString ifAbsent: [nil].	startmethod ifNil: [^self error: 'class ', aString, ' not found in class ', aString2.].		methodState _ OrderedCollection new.	methodState add: anInteger.	methodState add: startmethod.	methodState add: (self addInteger: 0).	methodState add: (self addArray: (Array new: (self at: (self at: startmethod) objects fourth) valueAsInteger withAll: 0)).	methodState add: (self addArray: (Array new: defaultargssize withAll: self nil)).	methodState add: 0.	methodState add: 0.	methodState add: 0.	classes at: 'startMethodState' put: (self addObject: (MySTObject withObjects: methodState)).	^self.! !!MySTImage methodsFor: 'accessing' stamp: 'SZ 2/9/2008 16:30'!classAt: aString 	^classes at: aString ifAbsent: [nil].! !!MySTImage methodsFor: 'accessing' stamp: 'SZ 2/12/2008 10:53'!getDictionary: aInteger	| result dict |	dict _ (self at: aInteger) objects.	result _ Dictionary new.		1 to: dict size by: 2 do: [:index | 		result 			at: (self at: (dict at: index)) valueAsString			put: (dict at: index+1)].			^result.! !!MySTImage methodsFor: 'accessing' stamp: 'SZ 2/10/2008 15:25'!nil	^classes at: 'nil' ifAbsent: [0].! !!MySTImage methodsFor: 'accessing' stamp: 'SZ 2/7/2008 13:56'!size	^objects size.! !!MySTImage methodsFor: 'enumerating' stamp: 'SZ 2/7/2008 13:27'!do: aBlock	^objects do: aBlock.! !!MySTImage methodsFor: 'removing' stamp: 'SZ 2/7/2008 13:27'!remove: aMySTObject ifAbsent: anExceptionBlock 	^objects remove: aMySTObject ifAbsent: anExceptionBlock.! !!MySTImage methodsFor: 'private' stamp: 'SZ 2/17/2008 18:22'!addClass: aString super: aString2 metaClass: aString3	| temp|	temp _ self addObject: (MySTObject 					withObjects: (OrderedCollection with: 0 with: (classes at: 'MetaClass_' , aString2) with: 0 with: (self addInteger: 0))	 				class: (classes at: 'MetaClass')).	classes at: aString3 put: temp.		temp _ self addObject: (MySTObject 					withObjects: (OrderedCollection with: 0 with: (classes at: aString2) with: 0 with: (self addInteger: 0))	 				class: (classes at: aString3)).	classes at: aString put: temp.		^temp.	! !!MySTImage methodsFor: 'private' stamp: 'SZ 2/17/2008 12:54'!addClass: aString super: aString2 metaClass: aString3 instancesCount: anInteger	| name temp newclass |	classes 		at: aString3 		ifAbsent: [			self 				addClass: aString3				super: 'MetaClass_', aString2				metaClass: 'MetaClass'				instancesCount: anInteger].	name _ self addSymbol: aString.	newclass _ MySTObject 					withObjects: (OrderedCollection 									with: name 									with: (classes at: aString2) 									with: (self addDictionary: Dictionary new) 									with: (self addInteger: 0))	 				class: (classes at: aString3).						temp _ self addObject: newclass.	classes at: aString put: temp.	^temp.	! !!MySTImage methodsFor: 'private' stamp: 'SZ 2/17/2008 19:12'!connectSuperInMetaClassObjectToClass	| temp2 |	temp2 _ (self at: (classes at: 'MetaClass_Object')) objects.	temp2 at: 2 put: (classes at: 'Class').	(self at: (classes at: 'MetaClass_Object')) objects: temp2.! !!MySTImage methodsFor: 'private' stamp: 'SZ 2/12/2008 20:05'!relocateConstantsAndClasses	| metaobjectclass method literals |	metaobjectclass _ self at: (classes at: 'MetaClass_Object' ifAbsent: [^self error: 'MetaClass_Object class not found!!'.]).	method _ (self getDictionary: metaobjectclass objects third) 				at: 'doRelocation' 				ifAbsent: [^self warning: 'Method doRelocation in MetaClass_Object class not found!!'.].	method _ (self at: method) objects.	literals _ (self at: method second) objects.	"objects remove: (literals at: 1)."	literals at: 2 put: (self classAt: 'true').	literals at: 3 put: (self classAt: 'false').	literals at: 4 put: (self classAt: 'nil').	literals at: 5 put: (self classAt: 'Integer').	literals at: 6 put: (self classAt: 'Float').	literals at: 7 put: (self classAt: 'SmallInteger').	(self at: method second) objects: literals. ! !!MySTImage methodsFor: 'private' stamp: 'SZ 2/12/2008 19:00'!relocateSmalltalkDictionary	| symbolclass method literals |	symbolclass _ self at: (classes at: 'Symbol' ifAbsent: [^self warning: 'Symbol class not found!!'.]).	method _ (self getDictionary: symbolclass objects third) 				at: 'value' 				ifAbsent: [^self warning: 'Method value in Symbol class not found!!'.].	method _ (self at: method) objects.	literals _ (self at: method second) objects.	"objects remove: (literals at: 1)."	literals at: 1 put: self addSmalltalkDictionary.	(self at: method second) objects: literals. ! !!MySTImage methodsFor: 'private' stamp: 'SZ 2/11/2008 19:41'!warning: aString	aString inspect.! !!MySTImage methodsFor: 'private' stamp: 'SZ 2/7/2008 19:02'!warning: aString with: anObject	aString inspect.	anObject inspect.! !TestCase subclass: #MySTImageTestCase	instanceVariableNames: 'testImage'	classVariableNames: ''	poolDictionaries: ''	category: 'MySTCompiler-Image'!!MySTImageTestCase methodsFor: 'as yet unclassified' stamp: 'SZ 2/7/2008 15:32'!setUp	testImage := MySTImage new.! !!MySTImageTestCase methodsFor: 'as yet unclassified' stamp: 'SZ 2/10/2008 17:02'!testAddArray	| test |	test _ testImage addArray: #(1024 1 99).	self shouldnt: test = nil.	self should: testImage size = 4.	self should: (testImage at: (testImage at: test) objects first) valueAsInteger = 1024.	self should: (testImage at: (testImage at: test) objects second) valueAsInteger = 1.	self should: (testImage at: (testImage at: test) objects third) valueAsInteger = 99.! !!MySTImageTestCase methodsFor: 'as yet unclassified' stamp: 'SZ 2/10/2008 15:40'!testAddCharacter	| test |	testImage addCharacter: 'a'.	self should: testImage size = 1.	test _ nil.	testImage do: [:obj | obj value = #(97) asByteArray ifTrue: [test _ obj].].	self shouldnt: test = nil.	self should: (test isMemberOf: MySTObject).	self should: test size = 1.	self should: test value = 'a' asByteArray."	self should: (test value = 'name1' as)."! !!MySTImageTestCase methodsFor: 'as yet unclassified' stamp: 'SZ 3/1/2008 16:57'!testAddClass	| testclass superclass dict |	testImage createStartClasses.	superclass _ testImage classAt: 'Object'.	self shouldnt: superclass = 0.	testclass _ MySTClass newAs: 'Integer2'.	testclass classSuperName: 'Object'.	dict _ Dictionary new.	dict at: 'Object' put: (MySTClass newAs: 'Object').	testclass inDictionary: dict.	testImage addClass: testclass.	self shouldnt: (testImage classAt: 'Integer2') isNil.	self should: (testImage at: (testImage at: (testImage classAt: 'Integer2')) objects first) value = 'Integer2' asByteArray.	self should: (testImage at: (testImage classAt: 'Integer2')) objects second = superclass.! !!MySTImageTestCase methodsFor: 'as yet unclassified' stamp: 'SZ 2/11/2008 12:07'!testAddInteger	| test |	testImage addInteger: 1024.	self should: testImage size = 1.	test _ testImage at: 1.	self shouldnt: test = nil.	self should: test value = #(0 4 0 0) asByteArray.	self should: test valueAsInteger = 1024.	self should: (test isKindOf: MySTObject)."	self should: (test value = 'name1' as)."! !!MySTImageTestCase methodsFor: 'as yet unclassified' stamp: 'SZ 3/1/2008 16:41'!testAddMethod	| test testmethod testbytecode testliterals testargcount testtmpcount testintheclass testname literals |	testImage createStartClasses.	test _ testImage addMethod: FakeMethod newForTestAddMethod1a.	testmethod _ testImage at: test.	testbytecode _testmethod objects first.	testliterals _ testmethod objects second.	testargcount _ testmethod objects third.	testtmpcount _ testmethod objects fourth.	testintheclass _ testmethod objects fifth.	testname _ testmethod objects sixth.	self should: (testImage at: testname) value = 'testmethod1a' asByteArray.	self should: (testImage at: testbytecode) value = #(164 0 1 116 0 3 148 2 208) asByteArray.	self should: (testImage at: testargcount) valueAsInteger = 0.	self should: (testImage at: testtmpcount) valueAsInteger = 3.	literals _ (testImage at: testliterals) objects.	self should: (testImage at: literals first) value = 'Object' asByteArray.	self should: (testImage at: literals second) value = 'value' asByteArray.	self should: (testImage at: literals third) value = 'new:' asByteArray.	self should: (testImage at: literals fourth) valueAsInteger = 4.	"self should: (testImage at: (testImage at: testintheclass) objects first) value = 'Object' asByteArray."! !!MySTImageTestCase methodsFor: 'as yet unclassified' stamp: 'SZ 2/7/2008 15:48'!testAddSymbol	| test |	testImage addSymbol: 'name1'.	self should: testImage size = 1.	test _ nil.	testImage do: [:obj | obj value = 'name1' asByteArray ifTrue: [test _ obj].].	self shouldnt: test = nil.	self should: (test isKindOf: MySTObject)."	self should: (test value = 'name1' as)."! !!MySTImageTestCase methodsFor: 'as yet unclassified' stamp: 'SZ 3/1/2008 16:54'!testCreateStartClasses	"RootObject MetaClass_ ???"	"True and False meybe not"	testImage createStartClasses.	self shouldnt: (testImage classAt: 'Class') isNil.	self shouldnt: (testImage classAt: 'MetaClass_Class') isNil.	self shouldnt: (testImage classAt: 'Symbol') isNil.	self shouldnt: (testImage classAt: 'MetaClass_Symbol') isNil.	self shouldnt: (testImage classAt: 'UndefinedObject') isNil.	self shouldnt: (testImage classAt: 'MetaClass_UndefinedObject') isNil.	self shouldnt: (testImage classAt: 'nil') isNil.	"self shouldnt: testImage nil = 0."	self shouldnt: (testImage classAt: 'Integer') isNil.	self shouldnt: (testImage classAt: 'MetaClass_Integer') isNil.	self shouldnt: (testImage classAt: 'Object') isNil.	self shouldnt: (testImage classAt: 'MetaClass_Object') isNil.	self shouldnt: (testImage classAt: 'False') isNil.	self shouldnt: (testImage classAt: 'false') isNil.	self shouldnt: (testImage classAt: 'MetaClass_False') isNil.	self shouldnt: (testImage classAt: 'True') isNil.	self shouldnt: (testImage classAt: 'true') isNil.	self shouldnt: (testImage classAt: 'MetaClass_True') isNil.	self shouldnt: (testImage classAt: 'String') isNil.	self shouldnt: (testImage classAt: 'MetaClass_String') isNil.	self shouldnt: (testImage classAt: 'CompactDictionary') isNil.	self shouldnt: (testImage classAt: 'MetaClass_CompactDictionary') isNil.	self shouldnt: (testImage classAt: 'MethodDictionary') isNil.	self shouldnt: (testImage classAt: 'MetaClass_MethodDictionary') isNil.	self shouldnt: (testImage classAt: 'Method') isNil.	self shouldnt: (testImage classAt: 'MetaClass_Method') isNil.	self shouldnt: (testImage classAt: 'Block') isNil.	self shouldnt: (testImage classAt: 'MetaClass_Block') isNil.	self shouldnt: (testImage classAt: 'Character') isNil.	self shouldnt: (testImage classAt: 'MetaClass_Character') isNil.	self shouldnt: (testImage classAt: 'Array') isNil.	self shouldnt: (testImage classAt: 'MetaClass_Array') isNil.	self shouldnt: (testImage classAt: 'Boolean') isNil.	self shouldnt: (testImage classAt: 'MetaClass_Boolean') isNil.! !!MySTImageTestCase methodsFor: 'as yet unclassified' stamp: 'SZ 2/12/2008 10:51'!testDictionary	| test dict |	dict _ Dictionary new.	dict at: 'Integer' put: 99.	dict at: 'Character' put: 999.	dict at: 'String' put: 9999.	test _ testImage addDictionary: dict.	self shouldnt: test isNil.	test _ testImage at: test.	self should: test objects size = 6.	1 to: 6 by: 2 do: [:index | 		(test objects at: index+1) = 99			ifTrue: [ self should: (testImage at: (test objects at: index)) valueAsString = 'Integer'.]			ifFalse: [				(test objects at: index+1) = 999					ifTrue: [ self should: (testImage at: (test objects at: index)) valueAsString = 'Character'.]					ifFalse: [						(test objects at: index+1) = 9999							ifTrue: [self should: (testImage at: (test objects at: index)) valueAsString = 'String'.]							ifFalse: [self shouldnt: true]]]].	self should: (testImage getDictionary: test number) = dict.! !ByteArray variableByteSubclass: #MySTObject	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'MySTCompiler-Image'!!MySTObject methodsFor: 'accessing' stamp: 'SZ 2/11/2008 10:55'!byteSize	^self size + 16.! !!MySTObject methodsFor: 'accessing' stamp: 'SZ 2/7/2008 14:39'!class	^self unsignedLongAt: 5 bigEndian: false.! !!MySTObject methodsFor: 'accessing' stamp: 'SZ 2/7/2008 16:30'!class: anInteger	self unsignedLongAt: 5 put: anInteger bigEndian: false.	^anInteger.	! !!MySTObject methodsFor: 'accessing' stamp: 'SZ 2/11/2008 10:51'!flags: anInteger	self unsignedLongAt: 9 put: anInteger bigEndian: false.	^anInteger.! !!MySTObject methodsFor: 'accessing' stamp: 'SZ 2/7/2008 14:39'!number		^self unsignedLongAt: 1 bigEndian: false.! !!MySTObject methodsFor: 'accessing' stamp: 'SZ 2/7/2008 16:29'!number: anInteger 	self unsignedLongAt: 1 put: anInteger bigEndian: false.	^anInteger.! !!MySTObject methodsFor: 'accessing' stamp: 'SZ 2/11/2008 12:02'!objects	| data |	data _ Array new: self size / 4.	1 to: data size do: [:index |		data at: index put: (self unsignedLongAt: index*4+13 bigEndian: false)].	^data.	! !!MySTObject methodsFor: 'accessing' stamp: 'SZ 2/11/2008 12:03'!objects: aCollection 	aCollection withIndexDo: [:val :index | 		self unsignedLongAt: (index*4)+13 put: val bigEndian: false].	self flags: 1.	^aCollection.! !!MySTObject methodsFor: 'accessing' stamp: 'SZ 2/11/2008 10:52'!size	^self unsignedLongAt: 13 bigEndian: false.! !!MySTObject methodsFor: 'accessing' stamp: 'SZ 2/11/2008 10:52'!size: anInteger	self unsignedLongAt: 13 put: anInteger bigEndian: false.	^anInteger.! !!MySTObject methodsFor: 'accessing' stamp: 'SZ 2/11/2008 12:03'!value	| data |	data _ ByteArray new: self size.	1 to: data size do: [:offset | data at: offset put: (self byteAt: offset+16)].	^data.	! !!MySTObject methodsFor: 'accessing' stamp: 'SZ 2/11/2008 10:55'!value: aCollection	aCollection withIndexDo: [:val :index | self byteAt: index+16 put: val asInteger].	^aCollection.	! !!MySTObject methodsFor: 'accessing' stamp: 'SZ 2/10/2008 16:43'!valueAsInteger	^self objects first.! !!MySTObject methodsFor: 'accessing' stamp: 'SZ 2/11/2008 10:54'!valueAsInteger: anInteger	self objects: (OrderedCollection with: anInteger).	self flags: 0.	^anInteger.	! !!MySTObject methodsFor: 'accessing' stamp: 'SZ 2/12/2008 10:29'!valueAsString	^self value asString.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!MySTObject class	instanceVariableNames: ''!!MySTObject class methodsFor: 'as yet unclassified' stamp: 'SZ 2/11/2008 11:59'!new: aInteger	| result |	result _ super new: aInteger.	result size: aInteger - 16.	^result.! !!MySTObject class methodsFor: 'as yet unclassified' stamp: 'SZ 2/11/2008 10:56'!with: anObject	" anObject - Integer String ByteArray"	| result |	anObject isNumber		ifTrue: [			result _ self new: 20.			anObject < 0				ifTrue: [result valueAsInteger: 4294967296 + anObject]				ifFalse: [result valueAsInteger: anObject].			^result].			anObject isCharacter		ifTrue: [			result _ self new: 17.			result value: (OrderedCollection with: anObject).			^result.].	anObject isCollection		ifTrue: [			result _ self new: 16 + anObject size.			result value: anObject.			^result].	"unknow data type"			^nil.! !!MySTObject class methodsFor: 'as yet unclassified' stamp: 'SZ 2/11/2008 12:12'!with: anObject class: anInteger	^(self with: anObject) class: anInteger; yourself.! !!MySTObject class methodsFor: 'as yet unclassified' stamp: 'SZ 2/11/2008 12:10'!withObjects: anOrderedCollection	| result |	result _ self new: 16 + (anOrderedCollection size * 4).	result objects: anOrderedCollection.	^result.! !!MySTObject class methodsFor: 'as yet unclassified' stamp: 'SZ 2/11/2008 12:12'!withObjects: anOrderedCollection class: anInteger	^ (self withObjects: anOrderedCollection) class: anInteger; yourself.! !TestCase subclass: #MySTObjectTestCase	instanceVariableNames: 'GDict'	classVariableNames: ''	poolDictionaries: ''	category: 'MySTCompiler-Image'!!MySTObjectTestCase methodsFor: 'as yet unclassified' stamp: 'SZ 2/7/2008 15:00'!testInteger	|test|	test_ MySTObject with: 123456.	self should: (test isKindOf: MySTObject).	self should: test size = 4.	self should: test value = #(64 226 1 0) asByteArray.! !!MySTObjectTestCase methodsFor: 'as yet unclassified' stamp: 'SZ 2/7/2008 15:22'!testIntegerArray	|test|	test_ MySTObject with: (OrderedCollection with: 1 with: 123445 with: 4321).	self should: (test isKindOf: MySTObject).	self should: test size = 12.	self should: test value = #(1 0 0 0 53 226 1 0 225 16 0 0) asByteArray.	self should: test objects = #(1 123445 4321).! !!MySTObjectTestCase methodsFor: 'as yet unclassified' stamp: 'SZ 2/7/2008 14:45'!testString	|test|	test_ MySTObject with: 'name'.	self should: (test isKindOf: MySTObject).	self should: test size = 4.	self should: test value = #(110 97 109 101) asByteArray.! !